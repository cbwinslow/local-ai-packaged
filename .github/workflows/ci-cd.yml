name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  PROXMOX_USER: ${{ secrets.PROXMOX_USER }}
  PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
  PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
  PROXMOX_NODE: ${{ secrets.PROXMOX_NODE }}

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install UV
      run: |
        curl -sSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv .venv --python=3.10
        source .venv/bin/activate
        uv pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        source .venv/bin/activate
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with Black
      run: |
        source .venv/bin/activate
        black --check .
    
    - name: Type checking with mypy
      run: |
        source .venv/bin/activate
        mypy .

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install UV
      run: |
        curl -sSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv .venv --python=3.10
        source .venv/bin/activate
        uv pip install -r requirements-dev.txt
        uv pip install -r requirements.txt
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        source .venv/bin/activate
        pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/local-ai:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/local-ai:latest
    
  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Proxmox
      uses: xgheaven/proxmox-action@v1
      with:
        host: ${{ secrets.PROXMOX_HOST }}
        user: ${{ secrets.PROXMOX_USER }}
        password: ${{ secrets.PROXMOX_PASSWORD }}
        node: ${{ secrets.PROXMOX_NODE }}
        vm_id: 100
        template_name: debian-11-template
        clone_name: local-ai-${{ github.run_id }}
        full_clone: true
    
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: local-ai-dashboard
        directory: ./dashboard/.next
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
