version: '3.8'

services:
  app:
    build: .
    container_name: rag-graph-app
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123
      - POSTGRES_CONN_STRING=postgresql://postgres:postgres@postgres:5432/ragdb
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_BASE_URL=http://ollama:11434
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - API_KEYS_TABLE=api_keys
    depends_on:
      - neo4j
      - postgres
      - qdrant
      - ollama
    volumes:
      - ./data:/app/data
      - ./shared:/app/shared
    networks:
      - rag-network
    restart: unless-stopped

  neo4j:
    image: neo4j:5.13-community
    container_name: neo4j-rag
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=[\"apoc\"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "cypher-shell", "--username", "neo4j", "--password", "password123", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres-rag
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ragdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant-rag
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - rag-network
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama-rag
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag-network
    restart: unless-stopped

  # Add a service to pull the required Ollama model
  ollama-pull:
    image: ollama/ollama:latest
    container_name: ollama-pull-rag
    depends_on:
      - ollama
    command: >
      /bin/sh -c "
      sleep 10 && 
      ollama pull llama2 && 
      echo 'Ollama model pulled successfully'"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag-network
    restart: on-failure

networks:
  rag-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  postgres_data:
  qdrant_data:
  ollama_data:
