import { useQuery } from '@tanstack/react-query'
import axios from 'axios'
import { AlertCircle, Shield, Zap, CheckCircle, Download, AlertTriangle } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/Card'
import { cn } from '../lib/utils'
import { useState } from 'react'
import { Vulnerability } from '../types'

interface VulnerabilityItem {
  package: string
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'
  installedVersion: string
  fixedVersion?: string
  title: string
  description: string
  affectedServices: string[]
  cveId?: string
  score?: number
  publishedDate?: string
}

interface VulnerabilityStats {
  total: number
  critical: number
  high: number
  medium: number
  low: number
  fixedAvailable: number
  servicesAffected: number
}

export function VulnerabilitySummary() {
  const [selectedSeverity, setSelectedSeverity] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all')
  const [viewMode, setViewMode] = useState<'summary' | 'detailed'>('summary')
  const [sortBy, setSortBy] = useState<'severity' | 'score' | 'date' | 'service'>('severity')

  const { data: vulnerabilities, isLoading, error } = useQuery<VulnerabilityItem[]>({
    queryKey: ['vulnerabilities', selectedSeverity],
    queryFn: async () => {
      const response = await axios.get('/api/vulnerabilities/list', {
        params: { severity: selectedSeverity }
      })
      return response.data
    },
    refetchInterval: 60000, // 1 minute
    staleTime: 300000, // 5 minutes
  })

  const { data: stats } = useQuery<VulnerabilityStats>({
    queryKey: ['vulnerability-stats'],
    queryFn: async () => {
      const response = await axios.get('/api/vulnerabilities/summary')
      return response.data
    },
    staleTime: 60000,
  })

  const severityConfig = {
    critical: { color: 'bg-red-100 text-red-800 border-red-200', icon: AlertCircle, label: 'Critical' },
    high: { color: 'bg-orange-100 text-orange-800 border-orange-200', icon: AlertTriangle, label: 'High' },
    medium: { color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: AlertTriangle, label: 'Medium' },
    low: { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: Shield, label: 'Low' },
  }

  const SeverityFilterButton = ({ severity, label, active, onClick }: {
    severity: 'critical' | 'high' | 'medium' | 'low' | 'all'
    label: string
    active: boolean
    onClick: () => void
  }) => {
    const config = severity === 'all' 
      ? { color: 'bg-gray-100 text-gray-800 border-gray-200', icon: Shield, label: 'All' }
      : severityConfig[severity]

    const Icon = config.icon

    return (
      <button
        onClick={onClick}
        className={cn(
          "flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium border transition-colors",
          active 
            ? `${config.color} border-current shadow-sm` 
            : "text-muted-foreground border-gray-200 hover:bg-gray-50 hover:border-gray-300"
        )}
      >
        <Icon className="w-4 h-4" />
        <span>{label}</span>
      </button>
    )
  }

  const SortButton = ({ active, onClick, children }: {
    active: boolean
    onClick: () => void
    children: React.ReactNode
  }) => (
    <button
      onClick={onClick}
      className={cn(
        "px-3 py-2 text-sm font-medium rounded-md transition-colors",
        active 
          ? "bg-primary-100 text-primary-700 border border-primary-200" 
          : "text-muted-foreground border border-gray-200 hover:bg-gray-50"
      )}
    >
      {children}
    </button>
  )

  const getSortIcon = (sortField: string) => {
    if (sortBy === sortField) {
      return '↑'
    }
    return '↕'
  }

  const sortedVulnerabilities = vulnerabilities?.sort((a, b) => {
    switch (sortBy) {
      case 'severity':
        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
        return (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0)
      case 'score':
        return (b.score || 0) - (a.score || 0)
      case 'date':
        return new Date(b.publishedDate || 0).getTime() - new Date(a.publishedDate || 0).getTime()
      case 'service':
        return a.affectedServices.length - b.affectedServices.length
      default:
        return 0
    }
  }) || []

  const getFixRecommendation = (vulnerability: VulnerabilityItem) => {
    if (vulnerability.fixedVersion) {
      return `Upgrade to ${vulnerability.fixedVersion}`
    }
    
    switch (vulnerability.severity) {
      case 'critical':
        return 'Immediate action required - Consider container replacement or custom patching'
      case 'high':
        return 'Schedule update within 7 days - Monitor for exploits'
      case 'medium':
        return 'Plan update in next maintenance window'
      case 'low':
        return 'Monitor for updates - Low immediate risk'
      default:
        return 'Review and monitor'
    }
  }

  if (isLoading) {
    return (
      <Card className="card">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="h-5 w-5" />
            <span>Vulnerability Summary</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="h-12 bg-gray-200 rounded-md"></div>
              ))}
            </div>
            <div className="h-64 bg-gray-200 rounded-lg"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card className="card border-red-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-red-600">
            <AlertCircle className="h-5 w-5" />
            <span>Scan Data Unavailable</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="text-red-600">
          <p className="text-sm mb-2">Failed to load vulnerability data</p>
          <div className="flex items-center space-x-2 text-xs">
            <Zap className="h-3 w-3" />
            <span>Run Trivy scan: <code className="bg-gray-100 px-1 rounded">trivy image --format table $(docker images -q)</code></span>
          </div>
        </CardContent>
      </Card>
    )
  }

  const filteredVulnerabilities = selectedSeverity === 'all' 
    ? sortedVulnerabilities 
    : sortedVulnerabilities.filter(v => v.severity === selectedSeverity)

  return (
    <Card className="card">
      <CardHeader className="pb-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <CardTitle className="flex items-center space-x-2">
              <Shield className="h-5 w-5" />
              <span>Vulnerability Summary</span>
            </CardTitle>
            <CardDescription className="text-sm text-muted-foreground">
              Security scan results from Trivy - Last updated {new Date().toLocaleTimeString()}
            </CardDescription>
          </div>
          
          <div className="flex items-center gap-2">
            <SeverityFilterButton
              severity="critical"
              label="Critical"
              active={selectedSeverity === 'critical'}
              onClick={() => setSelectedSeverity('critical')}
            />
            <SeverityFilterButton
              severity="high"
              label="High"
              active={selectedSeverity === 'high'}
              onClick={() => setSelectedSeverity('high')}
            />
            <SeverityFilterButton
              severity="medium"
              label="Medium"
              active={selectedSeverity === 'medium'}
              onClick={() => setSelectedSeverity('medium')}
            />
            <SeverityFilterButton
              severity="low"
              label="Low"
              active={selectedSeverity === 'low'}
              onClick={() => setSelectedSeverity('low')}
            />
            <SeverityFilterButton
              severity="all"
              label="All"
              active={selectedSeverity === 'all'}
              onClick={() => setSelectedSeverity('all')}
            />
          </div>
        </div>
        
        {/* Sort Controls */}
        <div className="flex items-center justify-between pt-2 border-t">
          <div className="flex items-center space-x-2 text-xs text-muted-foreground">
            <span>Showing {filteredVulnerabilities.length} of {vulnerabilities?.length || 0} vulnerabilities</span>
            {stats && (
              <span className="ml-4">
                {stats.fixedAvailable > 0 && (
                  <span className="text-green-600">
                    <CheckCircle className="w-3 h-3 inline mr-1" />
                    {stats.fixedAvailable} fixable
                  </span>
                )}
              </span>
            )}
          </div>
          
          <div className="flex items-center space-x-1">
            <SortButton 
              active={sortBy === 'severity'}
              onClick={() => setSortBy('severity')}
            >
              Severity {getSortIcon('severity')}
            </SortButton>
            <SortButton 
              active={sortBy === 'score'}
              onClick={() => setSortBy('score')}
            >
              Score {getSortIcon('score')}
            </SortButton>
            <SortButton 
              active={sortBy === 'date'}
              onClick={() => setSortBy('date')}
            >
              Date {getSortIcon('date')}
            </SortButton>
            <SortButton 
              active={sortBy === 'service'}
              onClick={() => setSortBy('service')}
            >
              Services {getSortIcon('service')}
            </SortButton>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        {/* Stats Overview */}
        {stats && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6 p-4 bg-gray-50 rounded-lg">
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{stats.critical}</div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Critical</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{stats.high}</div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">High</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{stats.medium}</div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Medium</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.low}</div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Low</div>
            </div>
          </div>
        )}

        {/* View Toggle */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex space-x-2">
            <button
              onClick={() => setViewMode('summary')}
              className={cn(
                "px-4 py-2 text-sm font-medium rounded-md border transition-colors",
                viewMode === 'summary'
                  ? "bg-primary-50 border-primary-200 text-primary-700"
                  : "border-gray-200 text-muted-foreground hover:bg-gray-50"
              )}
            >
              Summary
            </button>
            <button
              onClick={() => setViewMode('detailed')}
              className={cn(
                "px-4 py-2 text-sm font-medium rounded-md border transition-colors",
                viewMode === 'detailed'
                  ? "bg-primary-50 border-primary-200 text-primary-700"
                  : "border-gray-200 text-muted-foreground hover:bg-gray-50"
              )}
            >
              Detailed List
            </button>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
              onClick={() => window.print()}
            >
              <Download className="w-4 h-4" />
              <span>Export Report</span>
            </button>
            
            {stats?.servicesAffected > 0 && (
              <div className="text-sm text-muted-foreground">
                {stats.servicesAffected} services affected
              </div>
            )}
          </div>
        </div>

        {/* Summary View */}
        {viewMode === 'summary' && (
          <div className="space-y-6">
            {/* Risk Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="card">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-red-600 flex items-center space-x-2">
                    <AlertCircle className="h-4 w-4" />
                    <span>Critical Risk</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-red-600">{stats?.critical || 0}</div>
                  <p className="text-sm text-muted-foreground mt-1">Immediate action required</p>
                  {stats?.critical > 0 && (
                    <div className="mt-3 p-3 bg-red-50 rounded text-sm text-red-800">
                      <p>Critical vulnerabilities can lead to:</p>
                      <ul className="list-disc list-inside mt-1 space-y-0.5">
                        <li>Remote code execution</li>
                        <li>Data breaches</li>
                        <li>Complete system compromise</li>
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card className="card">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-orange-600 flex items-center space-x-2">
                    <AlertTriangle className="h-4 w-4" />
                    <span>High Risk</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-orange-600">{stats?.high || 0}</div>
                  <p className="text-sm text-muted-foreground mt-1">Requires prompt attention</p>
                  {stats?.high > 0 && (
                    <div className="mt-3 p-3 bg-orange-50 rounded text-sm text-orange-800">
                      <p>High risk vulnerabilities may allow:</p>
                      <ul className="list-disc list-inside mt-1 space-y-0.5">
                        <li>Privilege escalation</li>
                        <li>Sensitive data exposure</li>
                        <li>Service disruption</li>
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card className="card">
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm font-medium text-yellow-600 flex items-center space-x-2">
                    <AlertTriangle className="h-4 w-4" />
                    <span>Medium Risk</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-yellow-600">{stats?.medium || 0}</div>
                  <p className="text-sm text-muted-foreground mt-1">Plan for updates</p>
                  <div className="mt-3 p-3 bg-yellow-50 rounded text-sm text-yellow-800">
                    <p>Medium risk items should be addressed in:</p>
                    <ul className="list-disc list-inside mt-1 space-y-0.5">
                      <li>Next maintenance cycle</li>
                      <li>Risk assessment</li>
                      <li>Configuration review</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Fixable Vulnerabilities */}
            {stats?.fixedAvailable > 0 && (
              <Card className="card">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2 text-green-600">
                    <CheckCircle className="h-5 w-5" />
                    <span>Fix Recommendations</span>
                  </CardTitle>
                  <CardDescription>
                    {stats.fixedAvailable} vulnerabilities have available updates
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {filteredVulnerabilities.slice(0, 5).map((vuln, index) => (
                      <div key={index} className="flex items-start space-x-3 p-3 bg-white rounded-lg border">
                        <div className={`flex-shrink-0 w-2 h-2 rounded-full mt-2 ${
                          vuln.severity === 'critical' ? 'bg-red-500' :
                          vuln.severity === 'high' ? 'bg-orange-500' :
                          vuln.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'
                        }`} />
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-2 mb-1">
                            <span className="text-sm font-medium text-gray-900 truncate">
                              {vuln.package} {vuln.installedVersion} → {vuln.fixedVersion}
                            </span>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              vuln.severity === 'critical' ? 'bg-red-100 text-red-800' :
                              vuln.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                              vuln.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'
                            }`}>
                              {vuln.severity.toUpperCase()}
                            </span>
                          </div>
                          
                          <p className="text-sm text-gray-600 mb-2">{vuln.title}</p>
                          
                          {vuln.affectedServices.length > 0 && (
                            <div className="text-xs text-gray-500 mb-2">
                              Services: {vuln.affectedServices.join(', ')}
                            </div>
                          )}
                          
                          <div className="flex items-center space-x-2 text-xs text-blue-600">
                            <Zap className="w-3 h-3" />
                            <span className="font-medium">{getFixRecommendation(vuln)}</span>
                          </div>
                        </div>
                        
                        <button className="flex-shrink-0 ml-2 px-2 py-1 text-xs font-medium text-white bg-primary-600 rounded hover:bg-primary-700 transition-colors">
                          Update
                        </button>
                      </div>
                    ))}
                    
                    {filteredVulnerabilities.length > 5 && (
                      <div className="text-center pt-4 border-t">
                        <button className="text-primary-600 hover:text-primary-700 text-sm font-medium">
                          View all {filteredVulnerabilities.length - 5} more
                        </button>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Action Plan */}
            <Card className="card">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-yellow-600" />
                  <span>Action Plan</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-start space-x-3 p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-400">
                    <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <h4 className="font-medium text-yellow-800">Priority Actions</h4>
                      <ul className="list-disc list-inside mt-2 space-y-1 text-sm text-yellow-800">
                        <li>
                          {stats?.critical > 0 ? `Address ${stats.critical} critical vulnerabilities within 24 hours` : 'No critical vulnerabilities detected'}
                        </li>
                        <li>
                          {stats?.high > 0 ? `Plan updates for ${stats.high} high-risk issues within 7 days` : 'High-risk issues managed'}
                        </li>
                        <li>
                          Schedule maintenance for {stats?.medium || 0} medium priority updates
                        </li>
                        <li>
                          Review {stats?.low || 0} low-risk items in next audit cycle
                        </li>
                      </ul>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t">
                    <div className="space-y-2">
                      <h5 className="text-sm font-medium text-gray-900">Next Steps</h5>
                      <ul className="space-y-1 text-xs text-gray-600">
                        <li className="flex items-center">
                          <CheckCircle className="w-3 h-3 text-green-500 mr-2" />
                          Run full Trivy scan
                        </li>
                        <li className="flex items-center">
                          <CheckCircle className="w-3 h-3 text-green-500 mr-2" />
                          Update vulnerable packages
                        </li>
                        <li className="flex items-center">
                          <CheckCircle className="w-3 h-3 text-green-500 mr-2" />
                          Test updates in staging
                        </li>
                        <li className="flex items-center">
                          <CheckCircle className="w-3 h-3 text-green-500 mr-2" />
                          Deploy and re-scan
                        </li>
                      </ul>
                    </div>
                    
                    <div className="space-y-2">
                      <h5 className="text-sm font-medium text-gray-900">Scan History</h5>
                      <div className="space-y-1 text-xs text-gray-600">
                        <div className="flex justify-between">
                          <span>Today</span>
                          <span className="font-medium">{stats?.total || 0} issues</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Yesterday</span>
                          <span className="font-medium">45 issues</span>
                        </div>
                        <div className="flex justify-between">
                          <span>2 days ago</span>
                          <span className="font-medium">38 issues</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Week ago</span>
                          <span className="font-medium">52 issues</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Detailed View */}
        {viewMode === 'detailed' && (
          <div className="space-y-4">
            {filteredVulnerabilities.length === 0 ? (
              <div className="text-center py-12">
                <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No Vulnerabilities Found</h3>
                <p className="text-sm text-muted-foreground mb-4">
                  All selected services are up to date with no known vulnerabilities
                </p>
                <div className="flex flex-wrap justify-center gap-2">
                  <button className="px-4 py-2 text-sm font-medium text-green-700 bg-green-100 rounded-md hover:bg-green-200 transition-colors">
                    Run New Scan
                  </button>
                  <button className="px-4 py-2 text-sm font-medium text-blue-700 bg-blue-100 rounded-md hover:bg-blue-200 transition-colors">
                    Export Clean Report
                  </button>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="sticky top-0 bg-white border-b p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">
                        Vulnerability Details ({filteredVulnerabilities.length})
                      </h3>
                      <p className="text-sm text-muted-foreground">
                        {selectedSeverity !== 'all' ? `Showing ${selectedSeverity} severity vulnerabilities` : 'All severity levels'}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => {
                          const reportContent = filteredVulnerabilities.map(v => 
                            `${v.package} ${v.installedVersion} (${v.severity}): ${v.title}`
                          ).join('\n')
                          navigator.clipboard.writeText(reportContent)
                        }}
                        className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                      >
                        <Download className="w-4 h-4" />
                        <span>Copy Report</span>
                      </button>
                      <button
                        className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-white bg-primary-600 rounded-md hover:bg-primary-700 transition-colors"
                        onClick={() => window.print()}
                      >
                        <Download className="w-4 h-4" />
                        <span>Export PDF</span>
                      </button>
                    </div>
                  </div>
                </div>

                {filteredVulnerabilities.map((vulnerability, index) => (
                  <Card key={index} className="card hover:shadow-md transition-shadow">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-3">
                          <div className={`flex-shrink-0 p-2 rounded-full ${
                            vulnerability.severity === 'critical' ? 'bg-red-100 text-red-600' :
                            vulnerability.severity === 'high' ? 'bg-orange-100 text-orange-600' :
                            vulnerability.severity === 'medium' ? 'bg-yellow-100 text-yellow-600' : 'bg-blue-100 text-blue-600'
                          }`}>
                            <AlertCircle className="h-5 w-5" />
                          </div>
                          
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center space-x-2 mb-1">
                              <h4 className="text-lg font-semibold text-gray-900 truncate">
                                {vulnerability.package} {vulnerability.installedVersion}
                              </h4>
                              <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                                vulnerability.severity === 'critical' ? 'bg-red-100 text-red-800' :
                                vulnerability.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                                vulnerability.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'
                              }`}>
                                {vulnerability.severity.toUpperCase()}
                              </span>
                              {vulnerability.score && (
                                <span className="text-xs text-gray-500">CVSS {vulnerability.score.toFixed(1)}</span>
                              )}
                            </div>
                            
                            <p className="text-sm text-gray-600 mb-2">{vulnerability.title}</p>
                            
                            {vulnerability.cveId && (
                              <div className="text-xs text-blue-600 font-medium mb-2">
                                CVE-{vulnerability.cveId}
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <div className="flex flex-col items-end space-y-2">
                          {vulnerability.fixedVersion && (
                            <div className="text-xs text-green-600 font-medium">
                              Fix available: {vulnerability.fixedVersion}
                            </div>
                          )}
                          
                          {vulnerability.publishedDate && (
                            <div className="text-xs text-gray-500">
                              Published: {new Date(vulnerability.publishedDate).toLocaleDateString()}
                            </div>
                          )}
                          
                          <div className="flex space-x-2">
                            <button className="px-3 py-1 text-xs font-medium text-white bg-primary-600 rounded hover:bg-primary-700 transition-colors">
                              Update Package
                            </button>
                            {vulnerability.affectedServices.length > 0 && (
                              <button className="px-3 py-1 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors">
                                Affected Services ({vulnerability.affectedServices.length})
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    </CardHeader>
                    
                    <CardContent className="space-y-4 pt-0">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {/* Description */}
                        <div>
                          <h5 className="text-sm font-medium text-gray-900 mb-2">Description</h5>
                          <p className="text-sm text-gray-600 leading-relaxed">
                            {vulnerability.description || 'No detailed description available. Please refer to the official CVE entry for more information.'}
                          </p>
                        </div>
                        
                        {/* Affected Services */}
                        {vulnerability.affectedServices && vulnerability.affectedServices.length > 0 && (
                          <div>
                            <h5 className="text-sm font-medium text-gray-900 mb-2">Affected Services</h5>
                            <div className="space-y-1">
                              {vulnerability.affectedServices.map((service, index) => (
                                <div key={index} className="flex items-center space-x-2 p-2 bg-gray-50 rounded text-sm">
                                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                  <span className="text-gray-900">{service}</span>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Recommendation */}
                      <div className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400">
                        <div className="flex items-start space-x-3">
                          <div className="flex-shrink-0 mt-0.5">
                            <Zap className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <h5 className="text-sm font-medium text-blue-900 mb-1">Recommendation</h5>
                            <p className="text-sm text-blue-800">
                              {getFixRecommendation(vulnerability)}
                            </p>
                            {vulnerability.fixedVersion && (
                              <div className="mt-2 p-2 bg-white rounded text-xs text-gray-700">
                                <strong>Update Command:</strong>
                                <br />
                                <code className="bg-gray-100 px-1 rounded">
                                  docker pull {vulnerability.package}:{vulnerability.fixedVersion}
                                </code>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Empty State for No Vulnerabilities */}
        {viewMode === 'detailed' && filteredVulnerabilities.length === 0 && (
          <div className="text-center py-12 border-2 border-dashed border-green-200 rounded-lg bg-green-50">
            <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-green-800 mb-2">Security Status: Clean</h3>
            <p className="text-sm text-green-700 mb-4">
              No vulnerabilities found for the selected criteria
            </p>
            <div className="space-y-2 text-xs text-green-700">
              <p><strong>Last Scan:</strong> {new Date().toLocaleString()}</p>
              <p><strong>Services Checked:</strong> {stats?.servicesAffected || 0}</p>
              <p><strong>Status:</strong> All systems up to date</p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

function getFixRecommendation(vulnerability: VulnerabilityItem): string {
  if (vulnerability.fixedVersion) {
    return `Upgrade to version ${vulnerability.fixedVersion} to resolve this vulnerability`
  }
  
  switch (vulnerability.severity) {
    case 'critical':
      return 'Immediate action required. Consider container replacement, custom patching, or temporary service isolation until a fix is available.'
    case 'high':
      return 'Schedule update within 7 days. Monitor for active exploits and consider implementing compensating controls.'
    case 'medium':
      return 'Plan update in next maintenance window (within 30 days). Include in regular security review process.'
    case 'low':
      return 'Monitor for updates. Include in quarterly security assessments. Low immediate risk but track for potential escalation.'
    default:
      return 'Review vulnerability details and monitor for updates. Include in regular security assessments.'
  }
}