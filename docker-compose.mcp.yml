version: '3.8'

services:
  # Congress.gov MCP Server
  mcp-congress-gov:
    build:
      context: ./mcp-servers/congress_gov_mcp
      dockerfile: Dockerfile
    container_name: mcp-congress-gov
    restart: unless-stopped
    environment:
      - PORT=3000
      - CONGRESS_GOV_API_KEY=${CONGRESS_GOV_API_KEY}
    ports:
      - "3001:3000"
    networks:
      - localai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Agent Memory MCP
  mcp-neo4j-agent-memory:
    build:
      context: ./mcp-servers/mcp-neo4j-agent-memory
      dockerfile: Dockerfile
    container_name: mcp-neo4j-agent-memory
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PORT=3002
    ports:
      - "3002:3002"
    depends_on:
      - neo4j
    networks:
      - localai

  # Neo4j Community Edition with Plugins
  neo4j:
    image: neo4j:5.13-community
    container_name: neo4j
    restart: unless-stopped
    user: "7474:7474"  # Run as neo4j user inside container
    environment:
      - NEO4J_AUTH=none  # Disable authentication for development
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use_neo4j_config=false
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_security_auth_enabled=false
      - NEO4J_dbms_connector_bolt_advertised_address=localhost:17687
      - NEO4J_dbms_connector_http_advertised_address=localhost:17474
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=:7687
      - NEO4J_dbms_connector_http_listen__address=:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - ./mcp-servers/neo4j/plugins:/plugins
      - ./mcp-servers/neo4j/conf:/conf
      - ./mcp-servers/neo4j/import:/import
    ports:
      - "17474:7474"  # Browser interface
      - "17687:7687"  # Bolt protocol
    healthcheck:
      test: ["CMD", "cypher-shell", "RETURN 1 || exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localai
      
  # Memgraph Database
  memgraph:
    image: memgraph/memgraph:2.15.2
    container_name: memgraph
    restart: unless-stopped
    environment:
      - MEMGRAPH_AI_ENABLED=1
      - MEMGRAPH_AI_DEBUG=1
      - MEMGRAPH_AI_EMBEDDING_MODEL=text-embedding-3-large
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MEMGRAPH_AI_EMBEDDING_DIMENSION=1536
    volumes:
      - memgraph_data:/var/lib/memgraph
      - memgraph_logs:/var/log/memgraph
      - memgraph_etc:/etc/memgraph
    ports:
      - "17688:7687"  # Different port than Neo4j
      - "13000:3000"  # Memgraph Lab (mapped to 13000 to avoid port conflict)
      - "17444:7444"  # Query monitoring (mapped to 17444)
    networks:
      - localai
      
  # Memgraph AI Toolkit
  memgraph-ai-toolkit:
    build:
      context: ./mcp-servers/ai-toolkit
      dockerfile: Dockerfile
    container_name: memgraph-ai-toolkit
    
  # FalkorDB - High-performance graph database
  falkordb:
    image: falkordb/falkordb:latest
    container_name: falkordb
    restart: unless-stopped
    command: [
      "--requirepass", "${FALKORDB_PASSWORD}",
      "--appendonly", "yes"
    ]
    environment:
      - REDIS_PASSWORD=${FALKORDB_PASSWORD}
      - MEMGRAPH_HOST=memgraph
      - MEMGRAPH_PORT=7687
      - PYTHONPATH=/app
    volumes:
      - falkordb_data:/data
    ports:
      - "16379:6379"  # Default Redis protocol port
      - "18080:8080"  # Web UI port
    depends_on:
      - memgraph
    networks:
      - localai

  # Vectorize MCP Server
  mcp-vectorize:
    build:
      context: ./mcp-servers/vectorize-mcp-server
      dockerfile: Dockerfile
    container_name: mcp-vectorize
    restart: unless-stopped
    environment:
      - PORT=3003
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX=${PINECONE_INDEX}
    ports:
      - "3003:3003"
    networks:
      - localai

  # PluggedIn MCP (MCP Manager)
  mcp-pluggedin:
    build:
      context: ./mcp-servers/pluggedin-mcp
      dockerfile: Dockerfile
    container_name: mcp-pluggedin
    restart: unless-stopped
    environment:
      - PORT=3004
      - MCP_CONFIG=/app/config/mcps.json
    volumes:
      - ./mcp-servers/pluggedin-mcp/config:/app/config
    ports:
      - "3004:3004"
    networks:
      - localai

  # StackHawk MCP
  mcp-stackhawk:
    build:
      context: ./mcp-servers/stackhawk-mcp
      dockerfile: Dockerfile
    container_name: mcp-stackhawk
    restart: unless-stopped
    environment:
      - PORT=3005
      - STACKHAWK_API_KEY=${STACKHAWK_API_KEY}
    ports:
      - "3005:3005"
    networks:
      - localai

networks:
  localai:
    external: true

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  memgraph_data:
  memgraph_logs:
  memgraph_etc:
  falkordb_data:
