version: '3.8'

# =============================================================================
# COMPREHENSIVE MCP (Model Context Protocol) SERVERS
# =============================================================================
# This configuration provides a robust set of MCP servers for various
# AI and data processing tasks with persistent volumes and proper networking
# =============================================================================

services:

  # =============================================================================
  # GOVERNMENT DATA MCP SERVERS
  # =============================================================================

  # Congress.gov MCP Server
  mcp-congress-gov:
    build:
      context: ./mcp-servers/congress_gov_mcp
      dockerfile: Dockerfile
    container_name: mcp-congress-gov
    restart: unless-stopped
    environment:
      - PORT=3000
      - CONGRESS_GOV_API_KEY=${CONGRESS_GOV_API_KEY}
      - NODE_ENV=production
      - LOG_LEVEL=info
    ports:
      - "3001:3000"
    volumes:
      - mcp_congress_data:/app/data
      - mcp_congress_logs:/app/logs
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-congress.rule=Host(`localhost`) && PathPrefix(`/mcp/congress`)"
      - "traefik.http.services.mcp-congress.loadbalancer.server.port=3000"

  # Federal Register MCP Server
  mcp-federal-register:
    build:
      context: ./mcp-servers/federal-register-mcp
      dockerfile: Dockerfile
    container_name: mcp-federal-register
    restart: unless-stopped
    environment:
      - PORT=3001
      - FEDERAL_REGISTER_API_KEY=${FEDERAL_REGISTER_API_KEY}
      - NODE_ENV=production
    ports:
      - "3011:3001"
    volumes:
      - mcp_federal_data:/app/data
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FEC (Federal Election Commission) MCP Server
  mcp-fec:
    build:
      context: ./mcp-servers/fec-mcp
      dockerfile: Dockerfile
    container_name: mcp-fec
    restart: unless-stopped
    environment:
      - PORT=3002
      - FEC_API_KEY=${FEC_API_KEY}
      - NODE_ENV=production
    ports:
      - "3012:3002"
    volumes:
      - mcp_fec_data:/app/data
    networks:
      - default

  # =============================================================================
  # DATABASE AND MEMORY MCP SERVERS
  # =============================================================================

  # Neo4j Agent Memory MCP
  mcp-neo4j-agent-memory:
    build:
      context: ./mcp-servers/mcp-neo4j-agent-memory
      dockerfile: Dockerfile
    container_name: mcp-neo4j-agent-memory
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PORT=3003
      - NODE_ENV=production
    ports:
      - "3013:3003"
    depends_on:
      - neo4j
    volumes:
      - mcp_neo4j_memory:/app/data
    networks:
      - default

  # PostgreSQL MCP Server
  mcp-postgresql:
    build:
      context: ./mcp-servers/postgresql-mcp
      dockerfile: Dockerfile
    container_name: mcp-postgresql
    restart: unless-stopped
    environment:
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      - NODE_ENV=production
    ports:
      - "3014:3004"
    depends_on:
      - postgres
    volumes:
      - mcp_postgres_data:/app/data
    networks:
      - default

  # Redis MCP Server
  mcp-redis:
    build:
      context: ./mcp-servers/redis-mcp
      dockerfile: Dockerfile
    container_name: mcp-redis
    restart: unless-stopped
    environment:
      - PORT=3005
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
    ports:
      - "3015:3005"
    depends_on:
      - redis
    networks:
      - default

  # =============================================================================
  # AI AND VECTOR DATABASE MCP SERVERS
  # =============================================================================

  # Vectorize MCP Server (with Qdrant)
  mcp-vectorize:
    build:
      context: ./mcp-servers/vectorize-mcp-server
      dockerfile: Dockerfile
    container_name: mcp-vectorize
    restart: unless-stopped
    environment:
      - PORT=3006
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NODE_ENV=production
    ports:
      - "3016:3006"
    depends_on:
      - qdrant
    volumes:
      - mcp_vectorize_data:/app/data
    networks:
      - default

  # Embedding MCP Server
  mcp-embeddings:
    build:
      context: ./mcp-servers/embeddings-mcp
      dockerfile: Dockerfile
    container_name: mcp-embeddings
    restart: unless-stopped
    environment:
      - PORT=3007
      - OLLAMA_URL=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NODE_ENV=production
    ports:
      - "3017:3007"
    volumes:
      - mcp_embeddings_cache:/app/cache
    networks:
      - default

  # =============================================================================
  # CLOUD INTEGRATION MCP SERVERS
  # =============================================================================

  # Cloudflare MCP Server
  mcp-cloudflare:
    build:
      context: ./mcp-servers/cloudflare-mcp
      dockerfile: Dockerfile
    container_name: mcp-cloudflare
    restart: unless-stopped
    environment:
      - PORT=3009
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - NODE_ENV=production
    ports:
      - "3019:3009"
    volumes:
      - mcp_cloudflare_data:/app/data
    networks:
      - default

  # Oracle Cloud Infrastructure MCP Server
  mcp-oci:
    build:
      context: ./mcp-servers/oci-mcp
      dockerfile: Dockerfile
    container_name: mcp-oci
    restart: unless-stopped
    environment:
      - PORT=3010
      - OCI_CONFIG_FILE=/app/config/oci_config
      - OCI_KEY_FILE=/app/config/oci_api_key.pem
      - NODE_ENV=production
    ports:
      - "3020:3010"
    volumes:
      - mcp_oci_data:/app/data
      - mcp_oci_config:/app/config
    networks:
      - default

  # =============================================================================
  # DEVELOPMENT AND MANAGEMENT MCP SERVERS
  # =============================================================================

  # PluggedIn MCP (MCP Manager)
  mcp-pluggedin:
    build:
      context: ./mcp-servers/pluggedin-mcp
      dockerfile: Dockerfile
    container_name: mcp-pluggedin
    restart: unless-stopped
    environment:
      - PORT=3011
      - MCP_CONFIG=/app/config/mcps.json
      - NODE_ENV=production
    volumes:
      - ./mcp-servers/pluggedin-mcp/config:/app/config
      - mcp_pluggedin_data:/app/data
    ports:
      - "3021:3011"
    networks:
      - default

  # GitHub MCP Server
  mcp-github:
    build:
      context: ./mcp-servers/github-mcp
      dockerfile: Dockerfile
    container_name: mcp-github
    restart: unless-stopped
    environment:
      - PORT=3012
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - NODE_ENV=production
    ports:
      - "3022:3012"
    volumes:
      - mcp_github_data:/app/data
    networks:
      - default

  # =============================================================================
  # SECURITY AND MONITORING MCP SERVERS
  # =============================================================================

  # StackHawk Security MCP
  mcp-stackhawk:
    build:
      context: ./mcp-servers/stackhawk-mcp
      dockerfile: Dockerfile
    container_name: mcp-stackhawk
    restart: unless-stopped
    environment:
      - PORT=3013
      - STACKHAWK_API_KEY=${STACKHAWK_API_KEY}
      - NODE_ENV=production
    ports:
      - "3023:3013"
    volumes:
      - mcp_stackhawk_data:/app/data
    networks:
      - default

  # Log Analysis MCP Server
  mcp-logs:
    build:
      context: ./mcp-servers/logs-mcp
      dockerfile: Dockerfile
    container_name: mcp-logs
    restart: unless-stopped
    environment:
      - PORT=3014
      - LOG_PATHS=/logs
      - NODE_ENV=production
    ports:
      - "3024:3014"
    volumes:
      - /var/log:/logs:ro
      - mcp_logs_data:/app/data
    networks:
      - default

  # =============================================================================
  # GRAPH DATABASE SERVERS (For permanent storage)
  # =============================================================================

  # Neo4j Community Edition with Plugins and Persistent Storage
  neo4j:
    image: neo4j:5.13-community
    container_name: mcp-neo4j
    restart: unless-stopped
    user: "7474:7474"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/neo4j-password}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use_neo4j_config=false
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=:7687
      - NEO4J_dbms_connector_http_listen__address=:7474
    volumes:
      - neo4j_data_persistent:/data
      - neo4j_logs_persistent:/logs
      - neo4j_import_persistent:/import
      - neo4j_plugins_persistent:/plugins
      - neo4j_conf_persistent:/conf
    ports:
      - "7474:7474"  # Browser interface
      - "7687:7687"  # Bolt protocol
    healthcheck:
      test: ["CMD", "cypher-shell", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      
  # Memgraph Database (Alternative Graph DB)
  memgraph:
    image: memgraph/memgraph:2.15.2
    container_name: mcp-memgraph
    restart: unless-stopped
    environment:
      - MEMGRAPH_AI_ENABLED=1
      - MEMGRAPH_AI_DEBUG=1
      - MEMGRAPH_AI_EMBEDDING_MODEL=text-embedding-3-large
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MEMGRAPH_AI_EMBEDDING_DIMENSION=1536
    volumes:
      - memgraph_data_persistent:/var/lib/memgraph
      - memgraph_logs_persistent:/var/log/memgraph
      - memgraph_etc_persistent:/etc/memgraph
    ports:
      - "7688:7687"  # Different port than Neo4j
      - "3000:3000"  # Memgraph Lab
      - "7444:7444"  # Query monitoring
    networks:
      - default
      
  # FalkorDB - High-performance graph database
  falkordb:
    image: falkordb/falkordb:latest
    container_name: mcp-falkordb
    restart: unless-stopped
    command: [
      "--requirepass", "${FALKORDB_PASSWORD:-falkor-password}",
      "--appendonly", "yes"
    ]
    environment:
      - REDIS_PASSWORD=${FALKORDB_PASSWORD:-falkor-password}
    volumes:
      - falkordb_data_persistent:/data
    ports:
      - "6379:6379"  # Redis protocol port
    networks:
      - default

# =============================================================================
# PERSISTENT VOLUMES FOR DATA PERMANENCE
# =============================================================================
# These volumes ensure that all data persists even if containers are recreated
# Using named volumes with local driver for reliability
# =============================================================================
volumes:
  # Government Data MCP Volumes
  mcp_congress_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/congress/data
  mcp_congress_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/congress/logs
  mcp_federal_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/federal/data
  mcp_fec_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/fec/data

  # Database MCP Volumes
  mcp_neo4j_memory:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/neo4j-memory/data
  mcp_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/postgres/data

  # AI MCP Volumes
  mcp_vectorize_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/vectorize/data
  mcp_embeddings_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/embeddings/cache

  # Cloud Integration Volumes
  mcp_cloudflare_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/cloudflare/data
  mcp_oci_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/oci/data
  mcp_oci_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/oci/config

  # Development MCP Volumes
  mcp_pluggedin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/pluggedin/data
  mcp_github_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/github/data

  # Security MCP Volumes
  mcp_stackhawk_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/stackhawk/data
  mcp_logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mcp/logs/data

  # Graph Database Persistent Volumes
  neo4j_data_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/neo4j/data
  neo4j_logs_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/neo4j/logs
  neo4j_import_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/neo4j/import
  neo4j_plugins_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/neo4j/plugins
  neo4j_conf_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/neo4j/conf

  memgraph_data_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/memgraph/data
  memgraph_logs_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/memgraph/logs
  memgraph_etc_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/memgraph/etc

  falkordb_data_persistent:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/falkordb/data
