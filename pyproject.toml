[project]
name = "local-ai-packaged"
version = "2.0.0"
description = "Comprehensive Local AI Package for Government Data Analysis"
authors = [
    {name = "Local AI Package Team", email = "admin@localhost"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10,<3.13"

dependencies = [
    # Core Framework Dependencies
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    
    # Database Drivers
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.7",
    "redis>=5.0.0",
    
    # AI/ML Libraries
    "transformers>=4.35.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "openai>=1.3.0",
    
    # Data Processing
    "pandas>=2.1.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    
    # Document Processing
    "pypdf>=3.17.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.1.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    
    # Security & Encryption
    "cryptography>=41.0.0",
    "passlib>=1.7.0",
    
    # Testing & Quality
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    
    # Utilities
    "tqdm>=4.66.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    
    # Development Tools
    "black>=23.10.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project.optional-dependencies]
dev = [
    # Additional development tools
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    
    # Advanced testing
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    
    # Profiling
    "py-spy>=0.3.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    
    # Documentation building
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]

gpu = [
    # GPU acceleration
    "torch[cuda]>=2.1.0",
    "transformers[torch]>=4.35.0",
    "accelerate>=0.25.0",
    "bitsandbytes>=0.41.0",
]

production = [
    # Production monitoring
    "gunicorn>=21.2.0",
    "supervisor>=4.2.0",
    
    # Production databases
    "psycopg2>=2.9.7",
    "redis[hiredis]>=5.0.0",
    
    # Performance
    "uvloop>=0.19.0",
    "httptools>=0.6.0",
]

[project.scripts]
local-ai = "local_ai.cli:main"
ingest-data = "scripts.government_data_ingestion:main"
generate-secrets = "scripts.generate_secrets:main"

[tool.black]
line-length = 127
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/migrations/*"]

[tool.flake8]
max-line-length = 127
max-complexity = 10
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by isort)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".tox",
    ".venv",
    "venv",
    "migrations",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "qdrant_client.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=local_ai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["local_ai", "scripts", "tools"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.10.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]